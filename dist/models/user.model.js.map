{"version":3,"sources":["../../src/models/user.model.js"],"names":["Schema","mongoose","userSchema","displayName","String","firstName","lastName","birthDate","Date","sex","Boolean","avatar","email","type","lowercase","unique","googleId","password","pre","next","user","bcrypt","hash","methods","isValidPassword","compare","model"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;IAEQA,M,GAAWC,kB,CAAXD,M;;;AAER,IAAIE,aAAa,IAAIF,MAAJ,CAAW;AAC1BG,eAAaC,MADa;AAE1BC,aAAWD,MAFe;AAG1BE,YAAUF,MAHgB;AAI1BG,aAAWC,IAJe;AAK1BC,OAAKC,OALqB;AAM1BC,UAAQP,MANkB;AAO1BQ,SAAO;AACLC,UAAOT,MADF;AAEL;AACAU,eAAW,IAHN;AAILC,YAAS;AAJJ,GAPmB;AAa1BC,YAAUZ,MAbgB;AAc1Ba,YAAW;AACTJ,UAAOT;AACP;AAFS;AAde,CAAX,CAAjB;;AAoBAF,WAAWgB,GAAX,CAAe,MAAf;AAAA,sFAAuB,iBAAeC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACrB;AACMC,gBAFe,GAER,IAFQ;;AAIrB;AACA;;AALqB;AAAA,mBAMFC,mBAAOC,IAAP,CAAY,KAAKL,QAAjB,EAA2B,EAA3B,CANE;;AAAA;AAMfK,gBANe;;AAOrB;AACA,iBAAKL,QAAL,GAAgBK,IAAhB;AACA;AACAH;;AAVqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;AAaAjB,WAAWqB,OAAX,CAAmBC,eAAnB;AAAA,uFAAqC,kBAAeP,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BG,gBAD6B,GACtB,IADsB;AAEnC;AACA;;AAHmC;AAAA,mBAIbC,mBAAOI,OAAP,CAAeR,QAAf,EAAyBG,KAAKH,QAA9B,CAJa;;AAAA;AAI7BQ,mBAJ6B;AAAA,8CAM5BA,OAN4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;AAQA;kBACexB,mBAASyB,KAAT,CAAe,MAAf,EAAuBxB,UAAvB,C","file":"user.model.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nconst { Schema } = mongoose;\r\n\r\nlet userSchema = new Schema({\r\n  displayName: String,\r\n  firstName: String,\r\n  lastName: String,\r\n  birthDate: Date,\r\n  sex: Boolean,\r\n  avatar: String,\r\n  email: {\r\n    type : String,\r\n    // required : true,\r\n    lowercase: true,\r\n    unique : true\r\n  },\r\n  googleId: String,\r\n  password : {\r\n    type : String,\r\n    // required : true \r\n  }\r\n});\r\n\r\nuserSchema.pre('save', async function(next){\r\n  //'this' refers to the current document about to be saved\r\n  const user = this;\r\n  \r\n  //Hash the password with a salt round of 10, the higher the rounds the more secure, but the slower\r\n  //your application becomes.\r\n  const hash = await bcrypt.hash(this.password, 10);\r\n  //Replace the plain text password with the hash and then store it\r\n  this.password = hash;\r\n  //Indicates we're done and moves on to the next middleware\r\n  next();\r\n});\r\n\r\nuserSchema.methods.isValidPassword = async function(password){\r\n  const user = this;\r\n  //Hashes the password sent by the user for login and checks if the hashed password stored in the \r\n  //database matches the one sent. Returns true if it does else false.\r\n  const compare = await bcrypt.compare(password, user.password);\r\n  \r\n  return compare;\r\n}\r\n// Export the model\r\nexport default mongoose.model(\"User\", userSchema);"]}
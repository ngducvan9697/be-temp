{"version":3,"sources":["../src/app.js"],"names":["mongoose","Promise","global","connect","mainConfig","urlDb","useNewUrlParser","set","app","port","use","mainRouter","req","res","next","error","Error","message","status","HttpStatus","NOT_FOUND","err","INTERNAL_SERVER_ERROR","json","listen","console","log"],"mappings":";;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;AACA;;;;AACA;AACAA,mBAASC,OAAT,GAAmBC,OAAOD,OAA1B,C,CAVA;;AAWAD,mBAASG,OAAT,CAAiBC,iBAAWC,KAA5B,EAAmC,EAAEC,iBAAiB,IAAnB,EAAnC;AACAN,mBAASO,GAAT,CAAa,gBAAb,EAA+B,IAA/B;AACA,IAAMC,MAAM,wBAAZ;AACA,IAAMC,OAAOL,iBAAWK,IAAxB;;AAEA;AACA,2CAAoBD,GAApB;AACAA,IAAIE,GAAJ,CAAQ,MAAR,EAAgBC,iBAAhB;;AAEAH,IAAIE,GAAJ,CAAQ,UAACE,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAkB;AACxB,MAAMC,QAAQ,IAAIC,KAAJ,CAAU,WAAV,CAAd;AACAD,QAAME,OAAN,GAAgB,eAAhB;AACAF,QAAMG,MAAN,GAAeC,0BAAWC,SAA1B;AACAN,OAAKC,KAAL;AACD,CALD;AAMAP,IAAIE,GAAJ,CAAQ,UAACW,GAAD,EAAMT,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAC/B,SAAOD,IAAIK,MAAJ,CAAWG,IAAIH,MAAJ,IAAcC,0BAAWG,qBAApC,EAA2DC,IAA3D,CAAgE;AACrER,WAAO;AACLE,eAASI,IAAIJ;AADR;AAD8D,GAAhE,CAAP;AAKD,CAND;;AAQAT,IAAIgB,MAAJ,CAAWf,IAAX,EAAiB,YAAM;AACrBgB,UAAQC,GAAR,CAAY,6CAA6CjB,IAAzD;AACD,CAFD","file":"app.js","sourcesContent":["// ==================================== IMPORT LIBRARY ======================================\r\nimport express from 'express';\r\nimport mongoose from 'mongoose';\r\nimport passport from 'passport';\r\nimport HttpStatus from 'http-status-codes';\r\nimport { setGlobalMiddleware } from './middlewares/global-middleware';\r\n\r\nimport { mainConfig } from './config/main.config';\r\nimport { mainRouter } from './routes/main.router';\r\n// mongoose\r\nmongoose.Promise = global.Promise;\r\nmongoose.connect(mainConfig.urlDb, { useNewUrlParser: true });\r\nmongoose.set('useCreateIndex', true);\r\nconst app = express();\r\nconst port = mainConfig.port;\r\n\r\n// register global middleware\r\nsetGlobalMiddleware(app);\r\napp.use('/api', mainRouter);\r\n\r\napp.use((req, res, next)=>{\r\n  const error = new Error('Not found');\r\n  error.message = \"Invalid route\";\r\n  error.status = HttpStatus.NOT_FOUND;\r\n  next(error);\r\n})\r\napp.use((err, req, res, next) => {\r\n  return res.status(err.status || HttpStatus.INTERNAL_SERVER_ERROR).json({\r\n    error: {\r\n      message: err.message\r\n    }\r\n  });\r\n});\r\n\r\napp.listen(port, () => {\r\n  console.log('Server is up and running on port numner ' + port);\r\n});\r\n"]}
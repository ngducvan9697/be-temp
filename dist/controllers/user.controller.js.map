{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["signup","req","res","userService","validateSchema","body","error","value","details","status","BAD_REQUEST","json","UserModule","create","user","success","message","console","INTERNAL_SERVER_ERROR","login","findOne","email","err","bcryptjs","compare","password","matched","UNAUTHORIZED","token","jwt","sign","id","_id","mainConfig","secret","expiresIn","test","currentUser"],"mappings":";;;;;;;;;;;;;;AAAA;;AAKA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;kBAEe;AACRA,OADQ;AAAA,uGACDC,GADC,EACIC,GADJ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAGaC,eAAYC,cAAZ,CAA2BH,IAAII,IAA/B,CAHb,EAGJC,KAHI,yBAGJA,KAHI,EAGGC,KAHH,yBAGGA,KAHH;;AAAA,aAIRD,SAASA,MAAME,OAJP;AAAA;AAAA;AAAA;;AAAA,wCAKJN,IAAIO,MAAJ,CAAWC,4BAAX,EAAwBC,IAAxB,CAA6BL,KAA7B,CALI;;AAAA;AAAA;AAAA,cAOOM,eAAWC,MAAX,CAAkBN,KAAlB,CAPP;;AAAA;AAONO,WAPM;AAAA,wCAQLZ,IAAIS,IAAJ,CAAS,EAAEI,SAAS,IAAX,EAAiBC,SAAS,2BAA1B,EAAT,CARK;;AAAA;AAAA;AAAA;;AAUZC,eAAQX,KAAR;AAVY,wCAWLJ,IAAIO,MAAJ,CAAWS,sCAAX,EAAkCP,IAAlC,aAXK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAcRQ,MAdQ;AAAA,yGAcFlB,GAdE,EAcGC,GAdH;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAgBaC,eAAYC,cAAZ,CAA2BH,IAAII,IAA/B,CAhBb,EAgBJC,KAhBI,0BAgBJA,KAhBI,EAgBGC,KAhBH,0BAgBGA,KAhBH;;AAAA,aAiBRD,SAASA,MAAME,OAjBP;AAAA;AAAA;AAAA;;AAAA,yCAkBJN,IAAIO,MAAJ,CAAWC,4BAAX,EAAwBC,IAAxB,CAA6BL,KAA7B,CAlBI;;AAAA;AAAA;AAAA,cAoBOM,eAAWQ,OAAX,CAAmB,EAAEC,OAAOd,MAAMc,KAAf,EAAnB,CApBP;;AAAA;AAoBNP,WApBM;;AAAA,WAqBPA,IArBO;AAAA;AAAA;AAAA;;AAAA,yCAsBJZ,IACLO,MADK,CACEC,4BADF,EAELC,IAFK,CAEA,EAAEW,KAAK,2BAAP,EAFA,CAtBI;;AAAA;AAAA;AAAA,cA0BUC,mBAASC,OAAT,CAAiBjB,MAAMkB,QAAvB,EAAiCX,KAAKW,QAAtC,CA1BV;;AAAA;AA0BNC,cA1BM;;AAAA,WA2BPA,OA3BO;AAAA;AAAA;AAAA;;AAAA,yCA4BJxB,IAAIO,MAAJ,CAAWkB,6BAAX,EAAyBhB,IAAzB,CAA8B,EAAEW,KAAK,qBAAP,EAA9B,CA5BI;;AAAA;AA8BNM,YA9BM,GA8BEC,uBAAIC,IAAJ,CAAS,EAAEC,IAAIjB,KAAKkB,GAAX,EAAT,EAA2BC,iBAAWC,MAAtC,EAA8C;AAC3DC,mBAAW;AADgD,QAA9C,CA9BF;AAAA,yCAiCLjC,IAAIS,IAAJ,CAAS,EAAEI,SAAS,IAAX,EAAiBa,YAAjB,EAAT,CAjCK;;AAAA;AAAA;AAAA;;AAmCZX,eAAQX,KAAR;AAnCY,yCAoCLJ,IAAIO,MAAJ,CAAWS,sCAAX,EAAkCP,IAAlC,cApCK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAuCRyB,KAvCQ;AAAA,yGAuCHnC,GAvCG,EAuCEC,GAvCF;AAAA;AAAA;AAAA;AAAA;AAAA,yCAwCNA,IAAIS,IAAJ,CAASV,IAAIoC,WAAb,CAxCM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,C","file":"user.controller.js","sourcesContent":["import {\r\n\tBAD_REQUEST,\r\n\tINTERNAL_SERVER_ERROR,\r\n\tUNAUTHORIZED\r\n} from 'http-status-codes';\r\nimport bcryptjs from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nimport userService from '../services/user.service';\r\nimport UserModule from '../models/user.model';\r\nimport { mainConfig } from '../config/main.config';\r\n\r\nexport default {\r\n\tasync signup(req, res) {\r\n\t\ttry {\r\n\t\t\tconst { error, value } = userService.validateSchema(req.body);\r\n\t\t\tif (error && error.details) {\r\n\t\t\t\treturn res.status(BAD_REQUEST).json(error);\r\n\t\t\t}\r\n\t\t\tconst user = await UserModule.create(value);\r\n\t\t\treturn res.json({ success: true, message: 'User created successfully' });\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t\treturn res.status(INTERNAL_SERVER_ERROR).json(err);\r\n\t\t}\r\n\t},\r\n\tasync login(req, res) {\r\n\t\ttry {\r\n\t\t\tconst { error, value } = userService.validateSchema(req.body);\r\n\t\t\tif (error && error.details) {\r\n\t\t\t\treturn res.status(BAD_REQUEST).json(error);\r\n\t\t\t}\r\n\t\t\tconst user = await UserModule.findOne({ email: value.email });\r\n\t\t\tif (!user) {\r\n\t\t\t\treturn res\r\n\t\t\t\t\t.status(BAD_REQUEST)\r\n\t\t\t\t\t.json({ err: 'invalid email or password' });\r\n\t\t\t}\r\n\t\t\tconst matched = await bcryptjs.compare(value.password, user.password);\r\n\t\t\tif (!matched) {\r\n\t\t\t\treturn res.status(UNAUTHORIZED).json({ err: 'invalid credentials' });\r\n\t\t\t}\r\n\t\t\tconst token = jwt.sign({ id: user._id }, mainConfig.secret, {\r\n\t\t\t\texpiresIn: '1d'\r\n\t\t\t});\r\n\t\t\treturn res.json({ success: true, token });\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t\treturn res.status(INTERNAL_SERVER_ERROR).json(err);\r\n\t\t}\r\n\t},\r\n\tasync test(req, res) {\r\n\t\treturn res.json(req.currentUser);\r\n\t}\r\n};"]}